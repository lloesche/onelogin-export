#!/usr/bin/env ruby
$LOAD_PATH << File.expand_path(File.join(File.dirname(__FILE__), '../lib'))

require 'onelogin'
require 'optparse'
require 'yaml'
require 'unicode_utils'

never_delete = ['root', 'bin', 'daemon', 'adm', 'lp', 'sync', 'shutdown', 'halt', 'mail', 'operator', 'games', 'ftp', 'nobody', 'dbus', 'avahi', 'avahi-autoipd', 'saslauth', 'libstoragemgmt', 'rpc', 'usbmuxd', 'radvd', 'unbound', 'rpcuser', 'nfsnobody', 'polkitd', 'qemu', 'abrt', 'postfix', 'sshd', 'ntp', 'chrony', 'tcpdump']

options = Hash.new
mandatory = [:token, :format, :file]
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{$o} [options]"

  opts.on('-t', '--token API_TOKEN', 'OneLogin API Token') { |token| options[:token] = token }
  opts.on('-o', '--output FILE', 'Output file') { |file| options[:file] = file }
  opts.on('-a', '--ansible', 'Export Ansible format') { |ansible| options[:format] = :ansible }
  opts.on('-s', '--salt', 'Export Salt format') { |salt| options[:format] = :salt }
  opts.on('-f', '--full', 'Full Export') { |salt| options[:format] = :full }
end

begin
  optparse.parse!
  missing = mandatory.select{ |param| options[param].nil? }
  if not missing.empty?
    puts "Missing options: #{missing.join(', ')}"
    exit
  end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
  puts $!.to_s
  puts optparse
  exit
end

api_key = options[:token]
puts optparse if api_key.nil?

onelogin =  OneLogin::API.new(api_key)
onelogin.logger.level = Logger::ERROR

begin
  puts "retrieving list of users"
  users = OneLogin::Users.all(onelogin)
rescue Net::HTTPFatalError => e
  puts "caught an exception: #{e.message} - retrying"
  retry
end

def rm_nonascii(str)
  UnicodeUtils.nfkd(str).gsub(/(\p{Letter})\p{Mark}+/,'\\1')
end

users_without_sshkey = Array.new
users.each_in_parallel(50) do |user|
  if options[:format] == :full || (user.status_text == :active && ! user.uidgid.nil? && user.uidgid.is_a?(Numeric) && user.uidgid > 0 && ! user.sshpubkey.nil? && user.sshpubkey)
    puts "user #{user.username} is being populated"
    begin
      user.populate!(onelogin)
    rescue Net::HTTPFatalError => e
      puts "caught an exception: #{e.message} - retrying"
      retry
    end
  else
    puts "user #{user.username} has no sshpubkey and/or uidgid set"
    users_without_sshkey << user.username if user.username
  end
end

ssh_users = users.with_role('SSH')

output_string = nil
case options[:format]
when :ansible
  output = Hash.new
  output['users'] = Array.new
  output['users_deleted'] = users_without_sshkey
  ssh_users.each do |user|
    output['users'].push({  'username' => user.username,
                            'name' => "#{rm_nonascii(user.firstname)} #{rm_nonascii(user.lastname)}",
                            'groups' => ['sudo'],
                            'optional_groups' => ['docker'],
                            'uid' => user.uidgid,
                            'ssh_key' => [user.sshpubkey]
                         })
  end
  users.each do |user|
    output['users_deleted'].push({ 'username' => user.username }) if user.status_text != :active
  end
  output['users_deleted'] = output['users_deleted'].uniq - never_delete
  output_string = YAML.dump(output)
when :salt
  output = Hash.new
  output_deleted = Hash.new
  output['users'] = Array.new
  output_deleted['deleted_users'] = users_without_sshkey
  ssh_users.each do |user|
    output['users'].push({  user.username => {
                            'fullname' => "#{rm_nonascii(user.firstname)} #{rm_nonascii(user.lastname)}",
                            'crypt' => '',
                            'uid' => user.uidgid,
                            'gid' => user.uidgid,
                            'groups' => ['sudo'],
                            'optional_groups' => ['docker'],
                            'pub_ssh_keys' => [user.sshpubkey]
                          }
                         })
  end
  users.each do |user|
    output_deleted['deleted_users'].push(user.username) if user.status_text != :active
  end
  output_deleted['deleted_users'] = output_deleted['deleted_users'].uniq - never_delete
  output_string = YAML.dump(output)
  output_string = output_string.gsub(/^- /, '  ')
  output_deleted_string = YAML.dump(output_deleted)
  output_deleted_string = output_deleted_string.gsub(/^---$/, '')
  output_string += output_deleted_string
when :full
  output = users
  output_string = YAML.dump(output)
end


puts "writing output file #{options[:file]}"
File.write(options[:file], output_string)
puts "done"
